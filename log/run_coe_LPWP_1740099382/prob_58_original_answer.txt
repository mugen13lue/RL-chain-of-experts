```python
import gurobipy as gp
from gurobipy import GRB

def prob_58(glass_jars, plastic_jars, glass_jar_capacity, plastic_jar_capacity, glass_jar_constraint, minimum_glass_jar_count, total_honey_capacity):
    """
    Args:
        glass_jars: an integer, representing the number of glass jars filled
        plastic_jars: an integer, representing the number of plastic jars filled
        glass_jar_capacity: an integer, representing the capacity of a glass jar in ml
        plastic_jar_capacity: an integer, representing the capacity of a plastic jar in ml
        glass_jar_constraint: a string, specifying the constraint on the number of plastic jars in terms of the number of glass jars
        minimum_glass_jar_count: an integer, specifying the minimum number of glass jars to be filled
        total_honey_capacity: an integer, specifying the total capacity of the honey in ml

    Returns:
        objective_value: an integer, representing the maximum number of bottles filled
    """
    # Create a new model
    model = gp.Model("honey_jars")

    # Define decision variables
    x = model.addVar(vtype=GRB.INTEGER, name="glass_jars")
    y = model.addVar(vtype=GRB.INTEGER, name="plastic_jars")

    # Set objective function
    model.setObjective(x + y, sense=GRB.MAXIMIZE)

    # Add constraints
    model.addConstr(x >= minimum_glass_jar_count, "min_glass_jars")
    model.addConstr(glass_jar_capacity*x + plastic_jar_capacity*y <= total_honey_capacity, "honey_capacity")
    model.addConstr(y >= glass_jar_constraint*x, "plastic_constraint")

    # Optimize the model
    model.optimize()

    # Get the optimal objective value
    objective_value = model.objVal

    return objective_value
```