```python
import gurobipy as gp
from gurobipy import GRB

def prob_95(heap_leaching, vat_leaching):
    """
    Args:
        heap_leaching: an integer, the proportion of lands that use heap leaching technique
        vat_leaching: an integer, the proportion of lands that use vat leaching technique
    Returns:
        obj: an float, the maximum daily production of rare earth oxide
    """
    
    # Create a new model
    model = gp.Model("mining_optimization")
    
    # Define decision variables
    x = model.addVar(vtype=GRB.CONTINUOUS, name="x")  # Proportion of land using heap leaching technique
    y = model.addVar(vtype=GRB.CONTINUOUS, name="y")  # Proportion of land using vat leaching technique
    
    # Set objective function
    model.setObjective(3*x + 5*y, sense=GRB.MAXIMIZE)
    
    # Add constraints
    model.addConstr(3*x + 5*y <= 100, "Production_Constraint")
    model.addConstr(8*x + 17*y <= 90, "Wastewater_Constraint")
    model.addConstr(10*x + 20*y <= 100, "Machine_Constraint")
    model.addConstr(x + y == 1, "Proportion_Constraint")
    
    # Optimize model
    model.optimize()
    
    # Return the maximum daily production of rare earth oxide
    return model.objVal
```
This code defines a function `prob_95` that takes the proportions of lands using heap leaching and vat leaching techniques as input and returns the maximum daily production of rare earth oxide. The optimization problem is formulated using Gurobi optimization library with decision variables, objective function, and constraints as specified in the problem description and insights provided by other experts. The function optimizes the model and returns the desired output.