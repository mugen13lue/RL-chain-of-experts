{"comment": "```python\nfrom scipy.optimize import linprog\n\ndef prob_112(demonstration_1, demonstration_2, mint_d1, active_d1, foam_d1, mint_d2, active_d2, foam_d2, tar_d1, tar_d2, mint_avail, active_avail, tar_max):\n    \"\"\"\n    Args:\n        demonstration_1: an integer, represents the number of demonstration 1\n        demonstration_2: an integer, represents the number of demonstration 2\n        mint_d1: an integer, represents the number of mint used in demonstration 1\n        active_d1: an integer, represents the number of active ingredient used in demonstration 1\n        foam_d1: an integer, represents the amount of minty foam produced in demonstration 1\n        mint_d2: an integer, represents the number of mint used in demonstration 2\n        active_d2: an integer, represents the number of active ingredient used in demonstration 2\n        foam_d2: an integer, represents the amount of minty foam produced in demonstration 2\n        tar_d1: an integer, represents the amount of black tar produced in demonstration 1\n        tar_d2: an integer, represents the amount of black tar produced in demonstration 2\n        mint_avail: an integer, represents the available amount of mint\n        active_avail: an integer, represents the available amount of active ingredients\n        tar_max: an integer, represents the maximum amount of black tar allowed\n\n    Returns:\n        obj: an integer, the objective value which is the amount of minty foam produced\n    \"\"\"\n    c = [-foam_d1, -foam_d2]  # Coefficients of the objective function to be minimized\n\n    A = [[mint_d1, mint_d2], [active_d1, active_d2], [tar_d1, tar_d2]]  # Coefficients of the left-hand side of constraints\n    b = [mint_avail, active_avail, tar_max]  # Right-hand side of constraints\n\n    bounds = [(0, None), (0, None)]  # Bounds for variables x and y\n\n    res = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method='highs')\n\n    return -res.fun  # Return the negative of the optimized objective value since linprog minimizes by default\n```", "expert": "Programming Expert"}