{"comment": "def prob_285(wide_trail, narrow_trail):\n    \"\"\"\n    Args:\n        wide_trail: an integer, the number of wide trails\n        narrow_trail: an integer, the number of narrow trails\n    Returns:\n        obj: an integer, the total amount of garbage produced\n    \"\"\"\n    obj = 6 * wide_trail + 3 * narrow_trail\n    return obj\n\n# Constraints\ndef constraints(wide_trail, narrow_trail):\n    if wide_trail <= 3 and wide_trail + narrow_trail <= 225:\n        return True\n    return False\n\n# Objective function\ndef minimize_garbage(wide_trail, narrow_trail):\n    return 6 * wide_trail + 3 * narrow_trail\n\n# Solve the problem\ndef solve_park_trails():\n    min_garbage = 1e9\n    best_wide_trail = 0\n    best_narrow_trail = 0\n\n    for x in range(4):\n        for y in range(226):\n            if constraints(x, y):\n                garbage = minimize_garbage(x, y)\n                if garbage < min_garbage:\n                    min_garbage = garbage\n                    best_wide_trail = x\n                    best_narrow_trail = y\n\n    return best_wide_trail, best_narrow_trail\n\n# Get the optimal solution\nwide_trail, narrow_trail = solve_park_trails()\ntotal_garbage = prob_285(wide_trail, narrow_trail)\n\nprint(\"Number of wide trails:\", wide_trail)\nprint(\"Number of narrow trails:\", narrow_trail)\nprint(\"Total amount of garbage produced:\", total_garbage)", "expert": "Modeling Knowledge Supplement Expert"}