{"comment": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_56(wraps, platters, meat_wrap, rice_wrap, meat_platter, rice_platter, time_wrap, time_platter, wrap_to_platter_ratio): \n    \"\"\"\n    Args:\n        wraps: an integer (number of wraps to produce)\n        platters: an integer (number of platters to produce)\n        meat_wrap: an integer (units of meat required for a wrap)\n        rice_wrap: an integer (units of rice required for a wrap)\n        meat_platter: an integer (units of meat required for a platter)\n        rice_platter: an integer (units of rice required for a platter)\n        time_wrap: an integer (time in minutes to produce a wrap)\n        time_platter: an integer (time in minutes to produce a platter)\n        wrap_to_platter_ratio: an integer (minimum ratio of wraps to platters)\n        \n    Returns:\n        obj: a float (minimum total production time)\n    \"\"\"\n    model = gp.Model(\"production_optimization\")\n    \n    # Variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"wraps\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"platters\")\n    \n    # Constraints\n    model.addConstr(meat_wrap*x + meat_platter*y >= 3000, \"meat_constraint\")\n    model.addConstr(rice_wrap*x + rice_platter*y >= 2500, \"rice_constraint\")\n    model.addConstr(x >= wrap_to_platter_ratio*y, \"wrap_platter_ratio_constraint\")\n    \n    # Objective\n    model.setObjective(time_wrap*x + time_platter*y, GRB.MINIMIZE)\n    \n    # Optimize model\n    model.optimize()\n    \n    return model.objVal", "expert": "Programming Expert"}