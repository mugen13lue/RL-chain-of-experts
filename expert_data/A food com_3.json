{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_223(Pi_TV, Beta_Video, Gamma_Live):\n    \"\"\"\n    Args:\n        Pi_TV: an integer, representing the number of commercials to run on Pi TV\n        Beta_Video: an integer, representing the number of commercials to run on Beta Video\n        Gamma_Live: an integer, representing the number of commercials to run on Gamma Live\n    Returns:\n        obj: an integer, representing the maximum audience\n    \"\"\"\n    # Define the model\n    model = gp.Model(\"commercial_optimization\")\n\n    # Decision variables\n    Commercials_Pi_TV = model.addVar(vtype=GRB.INTEGER, name=\"Commercials_Pi_TV\")\n    Commercials_Beta_Video = model.addVar(vtype=GRB.INTEGER, name=\"Commercials_Beta_Video\")\n    Commercials_Gamma_Live = model.addVar(vtype=GRB.INTEGER, name=\"Commercials_Gamma_Live\")\n\n    # Set objective\n    model.setObjective(2000 * Commercials_Pi_TV + 5000 * Commercials_Beta_Video + 9000 * Commercials_Gamma_Live, sense=GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(0.2 * (Commercials_Pi_TV + Commercials_Beta_Video + Commercials_Gamma_Live) <= Commercials_Pi_TV)\n    model.addConstr(Commercials_Gamma_Live <= 0.33 * (Commercials_Pi_TV + Commercials_Beta_Video + Commercials_Gamma_Live))\n    model.addConstr(1200 * Commercials_Pi_TV + 2000 * Commercials_Beta_Video + 4000 * Commercials_Gamma_Live <= 20000)\n    model.addConstr(Commercials_Beta_Video <= 8)\n\n    # Optimize the model\n    model.optimize()\n\n    # Get the maximum audience\n    obj = model.objVal\n\n    return obj\n```", "expert": "Programming Expert"}