{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_58(glass_jars, plastic_jars, glass_jar_capacity, plastic_jar_capacity, glass_jar_constraint, minimum_glass_jar_count, total_honey_capacity):\n    \"\"\"\n    Args:\n        glass_jars: an integer, representing the number of glass jars filled\n        plastic_jars: an integer, representing the number of plastic jars filled\n        glass_jar_capacity: an integer, representing the capacity of a glass jar in ml\n        plastic_jar_capacity: an integer, representing the capacity of a plastic jar in ml\n        glass_jar_constraint: a string, specifying the constraint on the number of plastic jars in terms of the number of glass jars\n        minimum_glass_jar_count: an integer, specifying the minimum number of glass jars to be filled\n        total_honey_capacity: an integer, specifying the total capacity of the honey in ml\n\n    Returns:\n        objective_value: an integer, representing the maximum number of bottles filled\n    \"\"\"\n    # Create a new model\n    model = gp.Model(\"honey_jars\")\n\n    # Define decision variables\n    x = model.addVar(lb=minimum_glass_jar_count, vtype=GRB.INTEGER, name=\"glass_jars\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"plastic_jars\")\n\n    # Set objective function\n    model.setObjective(x + y, sense=GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(x * glass_jar_capacity + y * plastic_jar_capacity <= total_honey_capacity, \"honey_capacity\")\n    model.addConstr(y >= 2 * x, \"plastic_constraint\")\n\n    # Optimize model\n    model.optimize()\n\n    # Get the optimal objective value\n    objective_value = model.objVal\n\n    return objective_value\n```", "expert": "Modeling Knowledge Supplement Expert"}