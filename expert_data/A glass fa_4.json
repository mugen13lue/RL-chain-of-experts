{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_22(regular_glass_pane, tempered_glass_pane, regular_glass_cooling_time, tempered_glass_cooling_time, regular_glass_profit, tempered_glass_profit):\n    \"\"\"\n    Args:\n        regular_glass_pane: an integer, the time required in the heating machine for one regular glass pane\n        tempered_glass_pane: an integer, the time required in the heating machine for one tempered glass pane\n        regular_glass_cooling_time: an integer, the time required in the cooling machine for one regular glass pane\n        tempered_glass_cooling_time: an integer, the time required in the cooling machine for one tempered glass pane\n        regular_glass_profit: an integer, the profit per pane of regular glass\n        tempered_glass_profit: an integer, the profit per pane of tempered glass\n    Returns:\n        obj: an integer, the maximum profit\n    \"\"\"\n    \n    # Create a new model\n    model = gp.Model(\"glass_factory\")\n    \n    # Define decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"regular_glass_panes\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"tempered_glass_panes\")\n    \n    # Set objective function\n    model.setObjective(regular_glass_profit * x + tempered_glass_profit * y, sense=GRB.MAXIMIZE)\n    \n    # Add constraints\n    model.addConstr(regular_glass_pane * x + tempered_glass_pane * y <= 300, \"machine_time_constraint\")\n    model.addConstr(regular_glass_cooling_time * x + tempered_glass_cooling_time * y <= 300, \"cooling_machine_time_constraint\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Get the maximum profit\n    obj = model.objVal\n    \n    return obj\n```", "expert": "Modeling Knowledge Supplement Expert"}