{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_120(machine_1, machine_2):\n    \"\"\"\n    Args:\n        machine_1: a float, the usage of machine 1 in minutes\n        machine_2: a float, the usage of machine 2 in minutes\n    Returns:\n        Total_Amount_of_Waste: a float, the total amount of waste produced\n    \"\"\"\n    \n    # Create a new model\n    model = gp.Model(\"minimize_waste\")\n    \n    # Define decision variables\n    x = model.addVar(lb=0, vtype=GRB.CONTINUOUS, name=\"x\")  # minutes machine 1 is used\n    y = model.addVar(lb=0, vtype=GRB.CONTINUOUS, name=\"y\")  # minutes machine 2 is used\n    Waste_Machine1 = model.addVar(lb=0, vtype=GRB.CONTINUOUS, name=\"Waste_Machine1\")  # waste produced by machine 1\n    Waste_Machine2 = model.addVar(lb=0, vtype=GRB.CONTINUOUS, name=\"Waste_Machine2\")  # waste produced by machine 2\n    \n    # Set objective function: minimize total amount of waste produced\n    model.setObjective(Waste_Machine1 + Waste_Machine2, sense=GRB.MINIMIZE)\n    \n    # Add constraints\n    model.addConstr(0.5*x + 0.3*y <= 8, \"Heart_Medicine\")\n    model.addConstr(0.8*x + y >= 4, \"Brain_Medicine\")\n    model.addConstr(0.3*x <= Waste_Machine1, \"Waste_Machine1\")\n    model.addConstr(0.5*y <= Waste_Machine2, \"Waste_Machine2\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Get the total amount of waste produced\n    Total_Amount_of_Waste = model.objVal\n    \n    return Total_Amount_of_Waste\n```", "expert": "Programming Expert"}