{"comment": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_142(experiment_1, experiment_2, constraint_1, constraint_2, constraint_3, constraint_4, constraint_5, constraint_6, constraint_7, constraint_8):\n    \"\"\"\n    Args:\n        experiment_1: an integer, number of experiments of type 1\n        experiment_2: an integer, number of experiments of type 2\n        constraint_1: an integer, constraint on the availability of red liquid for experiment 1\n        constraint_2: an integer, constraint on the availability of blue liquid for experiment 1\n        constraint_3: an integer, constraint on the availability of red liquid for experiment 2\n        constraint_4: an integer, constraint on the availability of blue liquid for experiment 2\n        constraint_5: an integer, constraint on the production of smelly gas for experiment 1\n        constraint_6: an integer, constraint on the production of smelly gas for experiment 2\n        constraint_7: an integer, constraint on the maximum total production of smelly gas\n        constraint_8: an integer, constraint on the maximum total production of green gas\n\n    Returns:\n        obj: an integer, the objective value (total amount of green gas produced)\n    \"\"\"\n    # Create a new model\n    model = gp.Model(\"experiment_optimization\")\n\n    # Define decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"x\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"y\")\n\n    # Set objective function\n    model.setObjective(5*x + 6*y, sense=GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(3*x + 5*y <= constraint_1, \"red_liquid_constraint_exp1\")\n    model.addConstr(4*x + 3*y <= constraint_2, \"blue_liquid_constraint_exp1\")\n    model.addConstr(3*x + 5*y <= constraint_3, \"red_liquid_constraint_exp2\")\n    model.addConstr(4*x + 3*y <= constraint_4, \"blue_liquid_constraint_exp2\")\n    model.addConstr(x + 2*y <= constraint_5, \"smelly_gas_constraint_exp1\")\n    model.addConstr(2*x + 3*y <= constraint_6, \"smelly_gas_constraint_exp2\")\n    model.addConstr(x + y <= constraint_7, \"total_smelly_gas_constraint\")\n    model.addConstr(5*x + 6*y <= constraint_8, \"total_green_gas_constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Get the objective value\n    obj = model.objVal\n\n    return obj", "expert": "Programming Expert"}