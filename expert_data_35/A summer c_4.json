{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_102(beaker_1, beaker_2, constraint1, constraint2, constraint3, constraint4, constraint5, constraint6):\n    \"\"\"\n    Args:\n        beaker_1: an integer, number of units of flour used by beaker 1\n        beaker_2: an integer, number of units of flour used by beaker 2\n        constraint1: an integer, limit on total units of flour available\n        constraint2: an integer, limit on total units of special liquid available\n        constraint3: an integer, limit on total units of waste produced\n        constraint4: an integer, limit on units of waste produced by beaker 1\n        constraint5: an integer, limit on units of waste produced by beaker 2\n        constraint6: an integer, limit on units of slime produced by beaker 1\n\n    Returns:\n        amount_of_slime: an integer, maximum amount of slime that can be produced\n    \"\"\"\n    # Create a new model\n    model = gp.Model(\"summer_camp\")\n\n    # Create variables\n    x = model.addVar(lb=0, vtype=GRB.INTEGER, name=\"beaker_1\")\n    y = model.addVar(lb=0, vtype=GRB.INTEGER, name=\"beaker_2\")\n\n    # Set objective function\n    model.setObjective(5*x + 3*y, sense=GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(4*x + 6*y <= constraint1, \"flour_constraint\")\n    model.addConstr(6*x + 3*y <= constraint2, \"special_liquid_constraint\")\n    model.addConstr(4*x + 2*y <= constraint3, \"waste_constraint\")\n    model.addConstr(x <= constraint4, \"waste_beaker_1_constraint\")\n    model.addConstr(y <= constraint5, \"waste_beaker_2_constraint\")\n    model.addConstr(5*x <= constraint6, \"slime_beaker_1_constraint\")\n\n    # Optimize model\n    model.optimize()\n\n    # Get the maximum amount of slime produced\n    amount_of_slime = model.objVal\n\n    return amount_of_slime\n```", "expert": "Modeling Knowledge Supplement Expert"}