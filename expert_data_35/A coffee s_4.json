{"comment": "```python\nfrom gurobipy import *\n\ndef prob_86(mocha_coffee_powder, mocha_milk, regular_coffee_powder, regular_milk, mocha_time, regular_time,\n            mocha_regular_ratio, coffee_powder_limit, milk_limit):\n    \"\"\"\n    Args:\n        mocha_coffee_powder: an integer, the units of coffee powder required for each mocha.\n        mocha_milk: an integer, the units of milk required for each mocha.\n        regular_coffee_powder: an integer, the units of coffee powder required for each regular coffee.\n        regular_milk: an integer, the units of milk required for each regular coffee.\n        mocha_time: an integer, the time required to make a mocha in minutes.\n        regular_time: an integer, the time required to make a regular coffee in minutes.\n        mocha_regular_ratio: an integer, the minimum ratio between mochas and regular coffees to be made.\n        coffee_powder_limit: an integer, the maximum units of coffee powder available.\n        milk_limit: an integer, the maximum units of milk available.\n\n    Returns:\n        obj: an integer, the minimum total production time.\n    \"\"\"\n    model = Model(\"coffee_shop\")\n\n    # Variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"mochas\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"regular_coffees\")\n\n    # Constraints\n    model.addConstr(mocha_coffee_powder * x + regular_coffee_powder * y <= coffee_powder_limit, \"coffee_powder\")\n    model.addConstr(mocha_milk * x + regular_milk * y <= milk_limit, \"milk\")\n    model.addConstr(x >= mocha_regular_ratio * y, \"minimum_mochas\")\n\n    # Objective\n    model.setObjective(mocha_time * x + regular_time * y, GRB.MINIMIZE)\n\n    # Solve\n    model.optimize()\n\n    return int(model.objVal)\n```", "expert": "Modeling Knowledge Supplement Expert"}