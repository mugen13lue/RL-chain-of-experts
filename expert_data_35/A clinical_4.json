{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_271(n_factory, w_factory, n_anti_itch, n_topical_cream, w_anti_itch, w_topical_cream, n_plastic, w_plastic):\n    \"\"\"\n    Args:\n        n_factory: an integer, the production rate of anti-itch injections by the northern factory per hour.\n        w_factory: an integer, the production rate of topical cream by the western factory per hour.\n        n_anti_itch: an integer, the minimum required quantity of anti-itch injections.\n        n_topical_cream: an integer, the minimum required quantity of topical cream.\n        w_anti_itch: an integer, the production rate of anti-itch injections by the western factory per hour.\n        w_topical_cream: an integer, the production rate of topical cream by the western factory per hour.\n        n_plastic: an integer, the quantity of plastic required by the northern factory per hour.\n        w_plastic: an integer, the quantity of plastic required by the western factory per hour.\n\n    Returns:\n        obj: an integer, the minimum total time needed.\n    \"\"\"\n    \n    # Create a new model\n    model = gp.Model(\"factory_optimization\")\n    \n    # Create variables\n    x = model.addVar(lb=0, vtype=GRB.CONTINUOUS, name=\"x\")  # Number of hours the northern factory is run\n    y = model.addVar(lb=0, vtype=GRB.CONTINUOUS, name=\"y\")  # Number of hours the western factory is run\n    \n    # Set objective\n    model.setObjective(x + y, sense=GRB.MINIMIZE)\n    \n    # Add constraints\n    model.addConstr(40*x + 35*y <= 60000, \"plastic_constraint\")\n    model.addConstr(800*x + 650*y >= 800000, \"anti_itch_constraint\")\n    model.addConstr(700*x + 750*y >= 700000, \"topical_cream_constraint\")\n    \n    # Optimize model\n    model.optimize()\n    \n    # Get the minimum total time needed\n    obj = model.objVal\n    \n    return obj\n```", "expert": "Modeling Knowledge Supplement Expert"}