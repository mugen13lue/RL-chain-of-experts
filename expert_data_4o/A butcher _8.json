{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_87(manual_slicers, automatic_slicers, constraint1, constraint2, constraint3):\n    \"\"\"\n    Args:\n        manual_slicers: an integer, represents the number of manual slicers\n        automatic_slicers: an integer, represents the number of automatic slicers\n        constraint1: a string, represents the constraint \"manual_slicers <= automatic_slicers\"\n        constraint2: a string, represents the constraint \"5 * manual_slicers + 8 * automatic_slicers >= 50\"\n        constraint3: a string, represents the constraint \"3 * manual_slicers + 6 * automatic_slicers <= 35\"\n    Returns:\n        obj: an integer, represents the minimum total number of slicers\n    \"\"\"\n    \n    # Create a new model\n    model = gp.Model(\"slicer_problem\")\n    \n    # Define decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"manual_slicers\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"automatic_slicers\")\n    \n    # Set objective function: minimize total number of slicers\n    model.setObjective(x + y, sense=GRB.MINIMIZE)\n    \n    # Add constraints\n    model.addConstr(5*x + 8*y >= 50, name=\"slices_constraint\")\n    model.addConstr(3*x + 6*y <= 35, name=\"grease_constraint\")\n    model.addConstr(x <= y, name=\"manual_less_than_automatic_constraint\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Get the optimal objective value\n    obj = model.objVal\n    \n    return obj\n```", "expert": "Programming Expert"}