{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_81(motion_activated, manual, motion_activated_drops, motion_activated_power, manual_drops, manual_power, manual_limit, capacity, power_limit):\n    \"\"\"\n    Args:\n        motion_activated: an integer, representing the number of motion activated machines\n        manual: an integer, representing the number of manual machines\n        motion_activated_drops: an integer, representing the number of drops per minute for motion activated machines\n        motion_activated_power: an integer, representing the power consumption (in kWh) for motion activated machines\n        manual_drops: an integer, representing the number of drops per minute for manual machines\n        manual_power: an integer, representing the power consumption (in kWh) for manual machines\n        manual_limit: a float, representing the maximum ratio of manual machines\n        capacity: an integer, representing the minimum drops per minute requirement\n        power_limit: an integer, representing the maximum power consumption (in kWh) requirement\n\n    Returns:\n        obj: an integer, representing the minimized total number of machines\n    \"\"\"\n    obj = 1e9\n    \n    # Create a new model\n    model = gp.Model(\"hand_sanitizer\")\n\n    # Define decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"motion_activated\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"manual\")\n\n    # Set objective function: minimize total number of machines\n    model.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    model.addConstr(motion_activated_drops * x + manual_drops * y >= capacity)\n    model.addConstr(motion_activated_power * x + manual_power * y <= power_limit)\n    model.addConstr(y <= manual_limit * (x + y))\n    model.addConstr(x >= 3)\n\n    # Optimize model\n    model.optimize()\n\n    if model.status == GRB.OPTIMAL:\n        obj = model.objVal\n\n    return obj\n\n# Test the function with sample values\nprint(prob_81(0, 0, 50, 30, 75, 20, 0.4, 1000, 500))\n```", "expert": "Modeling Knowledge Supplement Expert"}