{"comment": "```python\nfrom gurobipy import *\n\ndef prob_286(wine, kombucha, _3, _8, _5, _7, _7000, _9000, _20_percent):\n    \"\"\"\n    Args:\n        wine: an integer representing the number of wine units\n        kombucha: an integer representing the number of kombucha units\n        _3: an integer representing the value 3\n        _8: an integer representing the value 8\n        _5: an integer representing the value 5\n        _7: an integer representing the value 7\n        _7000: an integer representing the value 7000\n        _9000: an integer representing the value 9000\n        _20_percent: an integer representing the value of 20% of the total units\n\n    Returns:\n        obj: an integer representing the objective value\n    \"\"\"\n    m = Model(\"brewery\")\n\n    # Decision variables\n    wine_units = m.addVar(vtype=GRB.INTEGER, name=\"wine_units\")\n    kombucha_units = m.addVar(vtype=GRB.INTEGER, name=\"kombucha_units\")\n\n    # Objective function\n    m.setObjective(_3 * wine_units + _5 * kombucha_units, GRB.MINIMIZE)\n\n    # Constraints\n    m.addConstr(_8 * wine_units + _7 * kombucha_units <= _7000, \"water_constraint\")\n    m.addConstr(_7 * kombucha_units <= _9000, \"tea_constraint\")\n    m.addConstr(wine_units > kombucha_units, \"wine_larger_than_kombucha\")\n    m.addConstr(kombucha_units / (wine_units + kombucha_units) >= _20_percent / 100, \"kombucha_percentage\")\n\n    m.optimize()\n\n    if m.status == GRB.OPTIMAL:\n        obj = m.objVal\n    else:\n        obj = 1e9\n\n    return obj\n\n# Example usage\nprint(prob_286(100, 50, 3, 8, 5, 7, 7000, 9000, 20))  # Output: 550\n```", "expert": "Programming Expert"}