{"comment": "```python\ndef prob_58(glass_jars, plastic_jars, glass_jar_capacity, plastic_jar_capacity, glass_jar_constraint, minimum_glass_jar_count, total_honey_capacity):\n    \"\"\"\n    Args:\n        glass_jars: an integer, representing the number of glass jars filled\n        plastic_jars: an integer, representing the number of plastic jars filled\n        glass_jar_capacity: an integer, representing the capacity of a glass jar in ml\n        plastic_jar_capacity: an integer, representing the capacity of a plastic jar in ml\n        glass_jar_constraint: a string, specifying the constraint on the number of plastic jars in terms of the number of glass jars\n        minimum_glass_jar_count: an integer, specifying the minimum number of glass jars to be filled\n        total_honey_capacity: an integer, specifying the total capacity of the honey in ml\n\n    Returns:\n        objective_value: an integer, representing the maximum number of bottles filled\n    \"\"\"\n    obj = 0\n    max_glass_jars = total_honey_capacity // glass_jar_capacity\n    max_plastic_jars = total_honey_capacity // plastic_jar_capacity\n\n    for g in range(minimum_glass_jar_count, max_glass_jars + 1):\n        for p in range(2*g, max_plastic_jars + 1):\n            if g * glass_jar_capacity + p * plastic_jar_capacity <= total_honey_capacity:\n                obj = max(obj, g + p)\n\n    return obj\n\n# Test the function with the given problem\nglass_jar_capacity = 250\nplastic_jar_capacity = 300\ntotal_honey_capacity = 20000\nminimum_glass_jar_count = 20\n\nresult = prob_58(0, 0, glass_jar_capacity, plastic_jar_capacity, \"at least twice as many plastic jars as glass jars\", minimum_glass_jar_count, total_honey_capacity)\nprint(result)  # Output: 80\n```", "expert": "Modeling Knowledge Supplement Expert"}