{"comment": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef prob_281(coconut_oil, lavender):\n    \"\"\"\n    Args:\n        coconut_oil: an integer, the number of units of coconut oil to be added\n        lavender: an integer, the number of units of lavender to be added\n    Returns:\n        obj: an integer, the total amount of time\n    \"\"\"\n    \n    # Define the objective function to minimize\n    def objective(x):\n        return 0.7*x[0] + 0.9*x[1]\n    \n    # Define the constraints\n    def constraint1(x):\n        return x[0] - 300\n    \n    def constraint2(x):\n        return x[0] + x[1] - 550\n    \n    def constraint3(x):\n        return x[0] - 3*x[1]\n    \n    # Define the initial guess\n    x0 = np.array([coconut_oil, lavender])\n    \n    # Define the bounds for the variables\n    bounds = ((300, None), (0, 550))\n    \n    # Define the constraints\n    cons = ({'type': 'eq', 'fun': constraint1},\n            {'type': 'eq', 'fun': constraint2},\n            {'type': 'eq', 'fun': constraint3})\n    \n    # Minimize the objective function subject to the constraints\n    res = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=cons)\n    \n    obj = res.fun\n    \n    return obj\n\n# Test the function with initial values\nprint(prob_281(400, 100))", "expert": "Modeling Knowledge Supplement Expert"}