{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_271(n_factory, w_factory, n_anti_itch, n_topical_cream, w_anti_itch, w_topical_cream, n_plastic, w_plastic):\n    \"\"\"\n    Args:\n        n_factory: an integer, the production rate of anti-itch injections by the northern factory per hour.\n        w_factory: an integer, the production rate of topical cream by the western factory per hour.\n        n_anti_itch: an integer, the minimum required quantity of anti-itch injections.\n        n_topical_cream: an integer, the minimum required quantity of topical cream.\n        w_anti_itch: an integer, the production rate of anti-itch injections by the western factory per hour.\n        w_topical_cream: an integer, the production rate of topical cream by the western factory per hour.\n        n_plastic: an integer, the quantity of plastic required by the northern factory per hour.\n        w_plastic: an integer, the quantity of plastic required by the western factory per hour.\n\n    Returns:\n        obj: an integer, the minimum total time needed.\n    \"\"\"\n    \n    # Create a new model\n    model = gp.Model(\"factory_optimization\")\n    \n    # Define decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"x\")  # Hours northern factory is run\n    y = model.addVar(vtype=GRB.INTEGER, name=\"y\")  # Hours western factory is run\n    \n    # Set objective function: minimize total time\n    model.setObjective(x + y, sense=GRB.MINIMIZE)\n    \n    # Add constraints\n    model.addConstr(n_factory*x + w_factory*y >= n_anti_itch)\n    model.addConstr(n_factory*x + w_factory*y >= n_topical_cream)\n    model.addConstr(n_plastic*x + w_plastic*y <= 60000)\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Get the minimum total time needed\n    obj = model.objVal\n    \n    return obj\n```", "expert": "Programming Expert"}