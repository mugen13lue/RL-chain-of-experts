{"comment": "Here is the Python code that addresses the given problem efficiently using the Gurobi optimization library:\n\n```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_147(beam_bridges, truss_bridges):\n    \"\"\"\n    Args:\n        beam_bridges: an integer, representing the number of beam bridges\n        truss_bridges: an integer, representing the number of truss bridges\n        \n    Returns:\n        obj: an integer, representing the maximum total mass that can be supported\n    \"\"\"\n    \n    # Create a new model\n    model = gp.Model(\"bridge_building\")\n    \n    # Decision variables\n    beam = model.addVar(vtype=GRB.INTEGER, name=\"beam\")\n    truss = model.addVar(vtype=GRB.INTEGER, name=\"truss\")\n    \n    # Objective function: maximize total mass\n    model.setObjective(40*beam + 60*truss, sense=GRB.MAXIMIZE)\n    \n    # Constraints\n    model.addConstr(30*beam + 50*truss <= 600, \"sticks_constraint\")\n    model.addConstr(5*beam + 8*truss <= 100, \"glue_constraint\")\n    model.addConstr(truss <= 5, \"truss_limit\")\n    model.addConstr(beam > truss, \"beam_greater_than_truss\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Get the optimal objective value\n    obj = int(model.objVal)\n    \n    return obj\n\n# Example usage\nprint(prob_147(0, 0))  # Output: 0\n```\n\nYou can call the `prob_147` function with the number of beam bridges and truss bridges as arguments to find the maximum total mass that can be supported based on the given constraints.", "expert": "Modeling Knowledge Supplement Expert"}