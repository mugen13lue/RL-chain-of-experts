{"comment": "```python\nfrom gurobipy import *\n\ndef prob_286(wine, kombucha, fruit_per_wine, water_per_wine, fruit_per_kombucha, tea_per_kombucha, total_water, total_tea, percent_kombucha):\n    \"\"\"\n    Args:\n        wine: an integer representing the number of wine units\n        kombucha: an integer representing the number of kombucha units\n        fruit_per_wine: an integer representing the units of fruit required for wine\n        water_per_wine: an integer representing the units of water required for wine\n        fruit_per_kombucha: an integer representing the units of fruit required for kombucha\n        tea_per_kombucha: an integer representing the units of tea required for kombucha\n        total_water: an integer representing the total units of water available\n        total_tea: an integer representing the total units of tea available\n        percent_kombucha: an integer representing the percentage of kombucha products\n\n    Returns:\n        obj: an integer representing the objective value\n    \"\"\"\n    m = Model(\"brewery\")\n\n    # Decision variables\n    wine_units = m.addVar(vtype=GRB.INTEGER, name=\"wine_units\")\n    kombucha_units = m.addVar(vtype=GRB.INTEGER, name=\"kombucha_units\")\n\n    # Objective function\n    m.setObjective(fruit_per_wine * wine_units + fruit_per_kombucha * kombucha_units, GRB.MINIMIZE)\n\n    # Constraints\n    m.addConstr(water_per_wine * wine_units + tea_per_kombucha * kombucha_units <= total_water, \"water_constraint\")\n    m.addConstr(tea_per_kombucha * kombucha_units <= total_tea, \"tea_constraint\")\n    m.addConstr(wine_units >= kombucha_units, \"wine_larger_than_kombucha\")\n    m.addConstr(kombucha_units / (wine_units + kombucha_units) >= percent_kombucha / 100, \"kombucha_percentage\")\n\n    m.optimize()\n\n    if m.status == GRB.OPTIMAL:\n        obj = m.objVal\n    else:\n        obj = 1e9\n\n    return obj\n```", "expert": "Programming Expert"}