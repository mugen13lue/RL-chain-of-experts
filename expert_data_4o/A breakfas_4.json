{"comment": "Here is the Python code that solves the given linear programming problem using the PuLP library:\n\n```python\nfrom pulp import LpMaximize, LpProblem, LpVariable\n\ndef prob_12():\n    # Create the LP object, set up as a maximization problem\n    prob = LpProblem(\"Maximize Profit\", LpMaximize)\n\n    # Define decision variables\n    x = LpVariable(\"regular_sandwiches\", lowBound=0, cat='Integer')\n    y = LpVariable(\"special_sandwiches\", lowBound=0, cat='Integer')\n\n    # Set up the objective function\n    prob += 3*x + 4*y, \"Total Profit\"\n\n    # Add constraints\n    prob += 2*x + 3*y <= 40, \"Eggs Constraint\"\n    prob += 3*x + 5*y <= 70, \"Bacon Constraint\"\n\n    # Solve the LP problem\n    prob.solve()\n\n    # Get the optimal solution\n    optimal_profit = round(prob.objective.value(), 2)\n    optimal_regular_sandwiches = x.varValue\n    optimal_special_sandwiches = y.varValue\n\n    return optimal_profit, optimal_regular_sandwiches, optimal_special_sandwiches\n\n# Call the function and print the results\noptimal_profit, optimal_regular_sandwiches, optimal_special_sandwiches = prob_12()\nprint(\"Optimal Profit: $\", optimal_profit)\nprint(\"Number of Regular Sandwiches to be made:\", optimal_regular_sandwiches)\nprint(\"Number of Special Sandwiches to be made:\", optimal_special_sandwiches)\n```\n\nThis code uses the PuLP library to create a linear programming problem, define decision variables, set up the objective function, add constraints, solve the problem, and retrieve the optimal solution. The output includes the optimal profit and the number of regular and special sandwiches to be made to maximize profit.", "expert": "Modeling Knowledge Supplement Expert"}