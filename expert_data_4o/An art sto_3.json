{"comment": "Here is the Python code that addresses the given problem efficiently:\n\n```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_24():\n    # Create a new model\n    model = gp.Model(\"art_store\")\n\n    # Decision variables\n    x1 = model.addVar(vtype=GRB.INTEGER, name=\"large_art_pieces\")\n    x2 = model.addVar(vtype=GRB.INTEGER, name=\"small_art_pieces\")\n\n    # Objective function: maximize profit\n    model.setObjective(30*x1 + 15*x2, sense=GRB.MAXIMIZE)\n\n    # Constraints\n    model.addConstr(4*x1 + 2*x2 <= 100, \"paint_constraint\")\n    model.addConstr(3*x1 + x2 <= 50, \"glitter_constraint\")\n    model.addConstr(5*x1 + 2*x2 <= 70, \"glue_constraint\")\n    model.addConstr(x1 >= 5, \"min_large_art_pieces\")\n    model.addConstr(x2 >= 5, \"min_small_art_pieces\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Get the objective value\n    obj = model.objVal\n\n    return obj\n\n# Call the function to solve the problem\nresult = prob_24()\nprint(\"Maximum profit: $\", result)\n```\n\nThis Python code uses the Gurobi optimization library to create a linear programming model for the given art store problem. It defines decision variables, sets the objective function to maximize profit, adds constraints based on available resources, and then optimizes the model to find the optimal solution that maximizes profit. Finally, it prints out the maximum profit value.", "expert": "Modeling Knowledge Supplement Expert"}