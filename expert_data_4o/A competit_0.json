{"comment": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_134(cheesecake, caramel_cake, cheesecake_calories, cheesecake_sugar, caramel_cake_calories, caramel_cake_sugar, min_caramel_cake_slices, max_calories):\n    \"\"\"\n    Args:\n        cheesecake: an integer, the number of slices of cheesecake\n        caramel_cake: an integer, the number of slices of caramel cake\n        cheesecake_calories: an integer, the calories in each slice of cheesecake\n        cheesecake_sugar: an integer, the sugar content in each slice of cheesecake\n        caramel_cake_calories: an integer, the calories in each slice of caramel cake\n        caramel_cake_sugar: an integer, the sugar content in each slice of caramel cake\n        min_caramel_cake_slices: an integer, the minimum number of slices of caramel cake to eat\n        max_calories: an integer, the maximum number of calories to consume in one day\n\n    Returns:\n        total_amount_of_sugar: an integer, the total amount of sugar consumed\n    \"\"\"\n    model = gp.Model(\"cake_eating\")\n\n    # Decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"cheesecake_slices\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"caramel_cake_slices\")\n\n    # Objective function: maximize total sugar consumed\n    model.setObjective(cheesecake_sugar * x + caramel_cake_sugar * y, sense=GRB.MAXIMIZE)\n\n    # Calories constraint\n    model.addConstr(cheesecake_calories * x + caramel_cake_calories * y <= max_calories)\n\n    # Minimum number of caramel cake slices constraint\n    model.addConstr(y >= min_caramel_cake_slices)\n\n    # Cheesecake preference constraint\n    model.addConstr(x >= 3 * y)\n\n    model.optimize()\n\n    total_amount_of_sugar = model.objVal\n\n    return total_amount_of_sugar", "expert": "Programming Expert"}