{"comment": "```python\nfrom gurobipy import *\n\ndef prob_102(beaker_1, beaker_2, constraint1, constraint2, constraint3, constraint4, constraint5, constraint6):\n    \"\"\"\n    Args:\n        beaker_1: an integer, number of units of flour used by beaker 1\n        beaker_2: an integer, number of units of flour used by beaker 2\n        constraint1: an integer, limit on total units of flour available\n        constraint2: an integer, limit on total units of special liquid available\n        constraint3: an integer, limit on total units of waste produced\n        constraint4: an integer, limit on units of waste produced by beaker 1\n        constraint5: an integer, limit on units of waste produced by beaker 2\n        constraint6: an integer, limit on units of slime produced by beaker 1\n\n    Returns:\n        amount_of_slime: an integer, maximum amount of slime that can be produced\n    \"\"\"\n    m = Model(\"Slime Production\")\n\n    # Decision variables\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\")\n\n    # Objective function\n    m.setObjective(constraint6 * x + 3 * y, GRB.MAXIMIZE)\n\n    # Constraints\n    m.addConstr(beaker_1 * x + beaker_2 * y <= constraint1, \"flour_constraint\")\n    m.addConstr(6 * x + 3 * y <= constraint2, \"special_liquid_constraint\")\n    m.addConstr(constraint4 * x + constraint5 * y <= constraint3, \"waste_constraint\")\n\n    m.optimize()\n\n    amount_of_slime = int(m.objVal)\n\n    return amount_of_slime\n```", "expert": "Programming Expert"}