{"comment": "```python\nfrom gurobipy import *\n\ndef prob_174(small_bins, large_bins):\n    \"\"\"\n    Solve the recycling problem and maximize the total amount of recycling material that can be collected.\n\n    Args:\n        small_bins: an integer, number of small bins\n        large_bins: an integer, number of large bins\n\n    Returns:\n        obj: an integer, total amount of recycling material\n    \"\"\"\n    \n    # Constants\n    small_workers = 2\n    large_workers = 5\n    small_capacity = 25\n    large_capacity = 60\n    total_workers = 100\n    \n    # Create a new model\n    model = Model(\"Recycling Problem\")\n    \n    # Decision variables\n    small_bin_var = model.addVar(vtype=GRB.INTEGER, name=\"Small_Bins\")\n    large_bin_var = model.addVar(vtype=GRB.INTEGER, name=\"Large_Bins\")\n    \n    # Constraints\n    model.addConstr(small_bin_var == 3 * large_bin_var, \"Small_Bins_Constraint\")\n    model.addConstr(large_bin_var >= 4, \"Large_Bins_Constraint\")\n    model.addConstr(small_bin_var >= 10, \"Small_Bins_Min_Constraint\")\n    model.addConstr(small_workers * small_bin_var + large_workers * large_bin_var <= total_workers, \"Workers_Constraint\")\n    \n    # Objective function\n    model.setObjective(small_capacity * small_bin_var + large_capacity * large_bin_var, GRB.MAXIMIZE)\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Get the total amount of recycling material\n    obj = model.objVal\n    \n    return obj\n```", "expert": "Programming Expert"}