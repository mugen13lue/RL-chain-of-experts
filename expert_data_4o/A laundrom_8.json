{"comment": "```python\nimport gurobipy as gp\nfrom gurobipy import GRB\n\ndef prob_71(top_loading_model, front_loading_model, var1, var2, var3, var4):\n    \"\"\"\n    Args:\n        top_loading_model: an integer, representing the number of top-loading machines\n        front_loading_model: an integer, representing the number of front-loading machines\n        var1: an integer, representing the number of items the top-loading model can wash per day\n        var2: an integer, representing the number of items the front-loading model can wash per day\n        var3: an integer, representing the amount of energy consumed by the top-loading model per day\n        var4: an integer, representing the amount of energy consumed by the front-loading model per day\n    Returns:\n        obj: an integer, representing the minimum total number of washing machines\n    \"\"\"\n    m = gp.Model(\"washing_machine_optimization\")\n\n    # Decision variables\n    x = m.addVar(vtype=GRB.INTEGER, name=\"top_loading_machines\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"front_loading_machines\")\n\n    # Constraints\n    m.addConstr(x >= 0)\n    m.addConstr(y >= 0)\n    m.addConstr(x + y >= 10)\n    m.addConstr(x <= 0.4 * (x + y))\n    m.addConstr(var1 * x + var2 * y >= 5000)\n    m.addConstr(var3 * x + var4 * y <= 7000)\n\n    # Objective function\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Solve the optimization problem\n    m.optimize()\n\n    # Retrieve the optimal objective value\n    obj = m.objVal\n\n    return obj\n```", "expert": "Programming Expert"}