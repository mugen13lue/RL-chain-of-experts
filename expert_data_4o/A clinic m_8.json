{"comment": "```python\nfrom gurobipy import *\n\ndef prob_118(vitamin_shots, pills, var1, var2, var3, var4, var5, var6):\n    \"\"\"\n    Args:\n        vitamin_shots: an integer, the number of batches of vitamin shots\n        pills: an integer, the number of batches of vitamin pills\n        var1: an integer, the number of units of vitamin C required for a batch of vitamin shots\n        var2: an integer, the number of units of vitamin D required for a batch of vitamin shots\n        var3: an integer, the number of units of vitamin C required for a batch of vitamin pills\n        var4: an integer, the number of units of vitamin D required for a batch of vitamin pills\n        var5: an integer, the maximum number of batches of vitamin shots\n        var6: an integer, the number of people supplied by one batch of vitamin pills\n    Returns:\n        obj: an integer, the maximum number of people that can be supplied\n    \"\"\"\n    m = Model(\"vitamin_supply\")\n\n    # Define variables\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\")  # Number of batches of vitamin shots\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\")  # Number of batches of vitamin pills\n\n    # Set objective\n    m.setObjective(10*x + 7*y, sense=GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(var1*x + var3*y <= var5, \"vitamin_c_constraint\")\n    m.addConstr(var2*x + var4*y <= var6, \"vitamin_d_constraint\")\n    m.addConstr(x <= vitamin_shots, \"number_of_shots_constraint\")\n    m.addConstr(x >= 0, \"non_negativity_constraint_x\")\n    m.addConstr(y >= 0, \"non_negativity_constraint_y\")\n    m.addConstr(y >= x, \"pills_more_than_shots_constraint\")\n\n    # Optimize model\n    m.optimize()\n\n    # Get the maximum number of people that can be supplied\n    obj = m.objVal\n\n    return obj\n```", "expert": "Modeling Knowledge Supplement Expert"}